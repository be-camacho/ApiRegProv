name: Deploy to EC2

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.EC2_SSH_KEY }}
        known_hosts: 'just-a-placeholder-so-we-dont-get-errors'

    - name: Connect to EC2 and deploy
      run: |
        ssh -o StrictHostKeyChecking=no -p ${{ secrets.EC2_PORT || 22 }} ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
          # 1. Actualizar código
          cd /home/ec2-user/ApiRegProv
          git pull origin main
          
          # 2. Detener y eliminar TODOS los contenedores Docker
          sudo docker stop $(sudo docker ps -aq) || true
          sudo docker rm $(sudo docker ps -aq) || true
          
          # 3. Eliminar TODAS las imágenes Docker
          sudo docker rmi $(sudo docker images -q) -f || true
          
          # 4. Limpieza profunda de Docker
          sudo docker system prune -af --volumes
          
          # 5. Forzar liberación del puerto 80
          sudo pkill -f 'docker-proxy' || true
          sudo lsof -ti :80 | xargs -r sudo kill -9 || true
          sudo ss -tulnp | grep ':80' | awk '{print $7}' | cut -d'=' -f2 | xargs -r sudo kill -9 || true
          
          # 6. Reconstruir imagen sin caché
          sudo docker build --no-cache -t apiprovs .
          
          # 7. Ejecutar nuevo contenedor con nombre específico
          sudo docker run -d \
            --name apiprovs_container \
            --restart unless-stopped \
            -p 80:8000 \
            apiprovs
          
          # 8. Verificación exhaustiva
          echo '--- Contenedores en ejecución ---'
          sudo docker ps -a
          echo '--- Imágenes disponibles ---'
          sudo docker images
          echo '--- Puerto 80 en uso ---'
          sudo lsof -i :80 || echo 'Ningún proceso usando puerto 80'
          echo '--- Intento de conexión ---'
          curl -v http://localhost:80 || echo 'Conexión fallida'
        "
