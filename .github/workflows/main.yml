name: Deploy to EC2

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file dynamically
        run: |
          cat <<EOF > .env
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          EOF

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.EC2_SSH_KEY }}
          known_hosts: "just-a-placeholder"

      - name: Deploy via SSH
        run: |
          # Copiar el .env generado al servidor
          scp -o StrictHostKeyChecking=no -P ${ { secrets.EC2_PORT || 22 } } .env ${ { secrets.EC2_USER } }@${ { secrets.EC2_HOST } }:/home/ec2-user/ApiRegProv/

          # Comandos SSH para el despliegue
          ssh -o StrictHostKeyChecking=no -p ${ { secrets.EC2_PORT || 22 } } ${ { secrets.EC2_USER } }@${ { secrets.EC2_HOST } } "
            cd /home/ec2-user/ApiRegProv

            # Limpieza previa
            sudo docker stop apiprovs_container || true
            sudo docker rm -f apiprovs_container || true
            sudo docker rmi -f apiprovs || true
            sudo docker system prune -f

            # Reconstruir y ejecutar
            sudo docker build --no-cache -t apiprovs .
            sudo docker run -d \
              --name apiprovs_container \
              --restart unless-stopped \
              -p 80:8000 \
              --env-file .env \
              apiprovs

            # Verificaci√≥n
            sleep 15
            curl -I http://localhost || echo 'App is starting...'
          "