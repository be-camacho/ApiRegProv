name: Deploy to EC2

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.EC2_SSH_KEY }}
        known_hosts: 'just-a-placeholder-so-we-dont-get-errors'

    - name: Connect to EC2 and deploy
      run: |
        ssh -o StrictHostKeyChecking=no -p ${{ secrets.EC2_PORT || 22 }} ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} /bin/bash << 'EOSSH'
        # 1. Asegurar directorio del proyecto
        if [ ! -d "/home/ec2-user/ApiRegProv" ]; then
          git clone https://github.com/be-camacho/ApiRegProv.git /home/ec2-user/ApiRegProv
        fi
        cd /home/ec2-user/ApiRegProv
        
        # 2. Resetear cambios locales y actualizar
        git reset --hard HEAD
        git clean -fd
        git pull origin main
        
        # 3. Crear .env seguro
        {
          echo "DB_NAME=$DB_NAME"
          echo "DB_USER=$DB_USER"
          echo "DB_PASSWORD=$DB_PASSWORD"
          echo "DB_HOST=$DB_HOST"
          echo "DB_PORT=$DB_PORT"
        } > .env
        chmod 600 .env
        
        # 4. Limpieza Docker
        sudo docker stop apiprovs_container || true
        sudo docker rm -f apiprovs_container || true
        sudo docker rmi -f apiprovs || true
        sudo docker system prune -af
        
        # 5. Liberar puerto 80
        sudo lsof -ti :80 | xargs -r sudo kill -9 || true
        
        # 6. Reconstruir y ejecutar
        sudo docker build --no-cache -t apiprovs .
        sudo docker run -d \
          --name apiprovs_container \
          --restart unless-stopped \
          -p 80:8000 \
          --env-file .env \
          apiprovs
        
        # 7. Verificación
        sleep 15
        echo '--- Contenedores activos ---'
        sudo docker ps
        echo '--- Intento de conexión ---'
        curl -I http://localhost || echo 'La aplicación no responde aún'
EOSSH
      env:
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}