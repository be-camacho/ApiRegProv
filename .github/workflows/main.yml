name: Deploy to EC2

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.EC2_SSH_KEY }}
        known_hosts: ${{ secrets.KNOWN_HOSTS || 'just-a-placeholder-so-we-dont-get-errors' }}

    - name: Connect to EC2 and deploy
      timeout-minutes: 10
      run: |
        set -e
        
        SSH_OPTS="-o StrictHostKeyChecking=no -o ConnectTimeout=30 -p ${{ secrets.EC2_PORT || 22 }}"
        
        # Generar el contenido del .env con los secrets
        ENV_CONTENT=$(cat << EOF
        DB_NAME=${{ secrets.DB_NAME }}
        DB_USER=${{ secrets.DB_USER }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        DB_HOST=${{ secrets.DB_HOST }}
        DB_PORT=${{ secrets.DB_PORT }}
        EOF
        )
        
        DEPLOY_SCRIPT=$(cat << 'EOF'
        # Configuraci칩n del proyecto
        REPO_DIR="/home/ec2-user/ApiRegProv"
        if [ ! -d "$REPO_DIR" ]; then
          git clone https://${{ secrets.GH_TOKEN }}@github.com/be-camacho/ApiRegProv.git "$REPO_DIR"
        fi
        cd "$REPO_DIR"
        git config --global --add safe.directory "$REPO_DIR"
        git pull origin main
        
        # Crear archivo .env
        cat > .env << 'ENV_EOF'
        $ENV_CONTENT
        ENV_EOF
        
        # Resto de tu script de despliegue Docker...
        docker system prune -af --filter "until=24h" || true
        
        if docker inspect apiprovs_container >/dev/null 2>&1; then
          docker stop apiprovs_container || true
          docker rm -f apiprovs_container || true
        fi
        
        docker build --pull -t apiprovs .
        
        docker run -d \
          --name apiprovs_container \
          --restart unless-stopped \
          -p 80:8000 \
          --env-file .env \
          -e NODE_ENV=production \
          --log-driver json-file \
          --log-opt max-size=10m \
          --log-opt max-file=3 \
          apiprovs
        
        # Verificaci칩n
        for i in {1..10}; do
          if curl -fsS http://localhost/health-check >/dev/null; then
            echo "Aplicaci칩n est치 respondiendo correctamente"
            break
          fi
          sleep 5
        done
        
        echo '--- Contenedores activos ---'
        docker ps
        EOF
        )
        
        # Pasar el contenido del .env y ejecutar el script
        ssh $SSH_OPTS ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "$DEPLOY_SCRIPT"